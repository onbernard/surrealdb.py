name: cross-build

on:
  pull_request:
  push:
    branches:
      - rust-no-runtime

env:
  CARGO_TERM_COLOR: always

jobs:
  build: # Workflow credit to https://github.com/samuelcolvin/rtoml/blob/main/.github/workflows/ci.yml
    name: >
      build ${{ matrix.python-version }} on ${{ matrix.platform || matrix.os }}
      (${{ matrix.alt_arch_name || matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        python-version: ['cp310', 'pp37', 'pp38', 'pp39']
        arch: [main, alt]
        include:
          - os: ubuntu
            platform: linux
          - os: windows
            ls: dir
          - os: macos
            arch: alt
            alt_arch_name: 'arm64 universal2'
        exclude:
        #   - os: windows
        #     arch: alt
          - os: macos
            python-version: 'pp37'
            arch: alt
          - os: macos
            python-version: 'pp38'
            arch: alt
          - os: macos
            python-version: 'pp39'
            arch: alt
        #   - os: ubuntu
        #     arch: alt

    runs-on: ${{ format('{0}-latest', matrix.os) }}
    steps:
    - uses: actions/checkout@v3

    - name: set up python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: set up rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
      
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.alt_arch_name }}

    - run: rustup target add aarch64-apple-darwin
      if: matrix.os == 'macos'

    - run: rustup toolchain install stable-i686-pc-windows-msvc
      if: matrix.os == 'windows'

    - run: rustup target add i686-pc-windows-msvc
      if: matrix.os == 'windows'

    - name: Get pip cache dir
      id: pip-cache
      if: matrix.os != 'windows'
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
    
    - name: Get pip cache dir
      id: pip-cache-win
      if: matrix.os == 'windows'
      run: |
        "dir=$(pip cache dir)" >> $env:GITHUB_OUTPUT
    
    - name: Cache python dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir || steps.pip-cache-win.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}

    - name: install python dependencies
      run: pip install -U setuptools wheel twine cibuildwheel platformdirs

    - name: Display cibuildwheel cache dir
      id: cibuildwheel-cache
      run: |
        from platformdirs import user_cache_path
        import os

        with open(os.getenv('GITHUB_OUTPUT'), 'w') as f:
          f.write(f"dir={str(user_cache_path(appname='cibuildwheel', appauthor='pypa'))}")
      shell: python

    - name: Cache cibuildwheel tools
      uses: actions/cache@v3
      with:
        path: ${{ steps.cibuildwheel-cache.outputs.dir }}
        key: ${{ runner.os }}-cibuildwheel-${{ matrix.python-version }}

    - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
      uses: KyleMayes/install-llvm-action@v1
      if: runner.os == 'Windows'
      with:
        version: "11.0"
        directory: ${{ runner.temp }}/llvm
        
    - name: Set LIBCLANG_PATH
      run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
      if: runner.os == 'Windows'

    - name: build sdist
      if: matrix.os == 'ubuntu' && matrix.python-version == 'cp310'
      run: |
        pip install maturin build
        python -m build --sdist -o wheelhouse

    - name: build ${{ matrix.platform || matrix.os }} binaries
      run: cibuildwheel --output-dir wheelhouse
      env:
        CIBW_BUILD: '${{ matrix.python-version }}-*'
        # rust doesn't seem to be available for musl linux on i686
        CIBW_SKIP: '*-musllinux_i686'
        # we build for "alt_arch_name" if it exists, else 'auto'
        CIBW_ARCHS: ${{ matrix.alt_arch_name || 'auto' }}
        CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH" CARGO_TERM_COLOR="always"'
        CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
        CIBW_BEFORE_BUILD: rustup show
        CIBW_BEFORE_BUILD_LINUX: >
          curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=stable --profile=minimal -y &&
          rustup show
        # CIBW_TEST_COMMAND: 'pytest {project}/test'
        # CIBW_TEST_REQUIRES: pytest requests
        # CIBW_TEST_SKIP: '*-macosx_arm64 *-macosx_universal2:arm64'
        CIBW_BUILD_VERBOSITY: 1

    - run: ${{ matrix.ls || 'ls -lh' }} wheelhouse/

    # - run: twine check wheelhouse/*

    - uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: wheelhouse
#   release:
#     needs: [build_wheels, build_sdist]
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/download-artifact@v2
#         with:
#           name: artifact
#           path: dist

#       - name: Release
#         uses: softprops/action-gh-release@v1
#         with:
#           body: |
#             view the CHANGELOG.md for full changes
#           files: |
#             dist/*
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - uses: pypa/gh-action-pypi-publish@master
#         with:
#           user: __token__
#           password: ${{ secrets.pypi_password }}






# name: cross-build

# on:
#   pull_request:
#   push:
#     branches:
#       - rust-no-runtime
# # def get_wheel_platform_tag(plat: str, arch: str) -> str:
# # # See https://packaging.python.org/specifications/platform-compatibility-tags/
# # if plat == "windows" and arch == "x86_64":
# #     return "win_amd64"
# # elif plat == "windows" and arch == "i386":
# #     return "win32"
# # elif plat == "linux" and arch == "x86_64":
# #     return "manylinux1_x86_64"
# # elif plat == "linux" and arch == "i386":
# #     return "manylinux1_i686"
# # elif plat == "macos" and arch == "x86_64":
# #     return "macosx_10_9_x86_64"

# jobs:
#   deploy:
#     name: deploy
#     # if: startsWith(github.ref, 'refs/tags/')
#     runs-on: ${{ matrix.config.os }}
#     strategy:
#       matrix:
#         config:
#             - os: ubuntu-latest
#               target: manylinux1_x86_64
#             - os: ubuntu-latest
#               target: manylinux1_i686
  
#             - os: macOS-latest
#               target: aarch64-apple-darwin
#             - os: macOS-latest
#               target: x86_64-apple-darwin
  
#             - os: windows-latest
#               target: win_amd64
#             - os: windows-latest
#               target: win32
#         # config:
#         #   - os: ubuntu-latest
#         #     target: aarch64-unknown-linux-gnu
#         #   - os: ubuntu-latest
#         #     target: armv7-unknown-linux-gnueabihf
#         #   - os: ubuntu-latest
#         #     target: i686-unknown-linux-gnu
#         #   - os: ubuntu-latest
#         #     target: i686-unknown-linux-musl
#         #   - os: ubuntu-latest
#         #     target: arm-unknown-linux-gnueabi
#         #   - os: ubuntu-latest
#         #     target: x86_64-unknown-linux-gnu
#         #   - os: ubuntu-latest
#         #     target: x86_64-unknown-linux-musl

#         #   - os: macOS-latest
#         #     target: aarch64-apple-darwin
#         #   - os: macOS-latest
#         #     target: x86_64-apple-darwin

#         #   - os: windows-latest
#         #     target: x86_64-pc-windows-msvc
#         #   - os: windows-latest
#         #     target: i686-pc-windows-msvc
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: extract the target
#         shell: bash
#         run: |
#           input="${{ github.ref }}"
#           version=${input##*/}
#           version=${version#v}
#           echo "Version: version"
#           echo "##[set-output name=version;]$version"

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: "3.10"

#       - name: Update pip
#         run: python -m pip install --upgrade pip

#       - name: Install rust
#         uses: actions-rs/toolchain@v1
#         with:
#           toolchain: stable
#           profile: minimal
#           override: true
#           target: ${{ matrix.config.target }}

#       - name: Build wheel package
#         shell: bash
#         run: |
#           python -m pip install wheel
#           pip install setuptools_rust
#           echo "--plat-name=${{ matrix.config.target }}"
#           ARCHFLAGS="-arch x86_64 -arch arm64"
#           sh ./build-wheels.sh
#         #   python setup.py bdist_wheel --plat-name=${{ matrix.config.target }}
    
#       - name: Check the files are there
#         run: |
#           ls dist/*.whl
#           echo "file=$(ls dist/)" >> $GITHUB_ENV
#           echo "file_path=$(ls dist/*.whl)" >> $GITHUB_ENV
        #   pip install $(ls dist/*.whl)
    
#       - name: Store Files in Cache
#         id: cache-files
#         uses: actions/cache@v3
#         with:
#           path: dist
#           key: ${{ env.file }}

#   upload:
#     name: Upload Artifacts
#     needs: deploy
#     runs-on: ubuntu-latest
#     steps:
#       - name: Upload artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: wheels
#           path: dist
