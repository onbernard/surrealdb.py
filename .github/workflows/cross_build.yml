name: cross-build

on:
  pull_request:
  push:
    branches:
      - rust-no-runtime


jobs:
  deploy:
    name: deploy
    # if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
          - os: ubuntu-latest
            target: i686-unknown-linux-musl
          - os: ubuntu-latest
            target: arm-unknown-linux-gnueabi
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl

          - os: macOS-latest
            target: aarch64-apple-darwin
          - os: macOS-latest
            target: x86_64-apple-darwin

          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: extract the target
        shell: bash
        run: |
          input="${{ github.ref }}"
          version=${input##*/}
          version=${version#v}
          echo "Version: version"
          echo "##[set-output name=version;]$version"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Install rust
        uses: actions-rs/toolchain@v2
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.config.target }}

      - name: Build wheel package
        shell: bash
        run: |
          python -m pip install wheel
          pip install setuptools_rust
          echo "--plat-name=${{ matrix.config.target }}"
          python setup.py bdist_wheel --plat-name=${{ matrix.config.target }}
    
      - name: Check the files are there
        run: |
          ls dist/*.whl
          echo "file=$(ls dist/)" >> $GITHUB_ENV
          echo "file_path=$(ls dist/*.whl)" >> $GITHUB_ENV
          pip install $(ls dist/*.whl)
    
#       - name: Store Files in Cache
#         id: cache-files
#         uses: actions/cache@v3
#         with:
#           path: dist
#           key: ${{ env.file }}

#   upload:
#     name: Upload Artifacts
#     needs: deploy
#     runs-on: ubuntu-latest
#     steps:
#       - name: Upload artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: wheels
#           path: dist
